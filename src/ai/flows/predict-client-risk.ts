// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Predicts the risk status (dropout or committed) of a client based on their activity and compliance data.
 *
 * - predictClientRisk - A function that predicts the client risk.
 * - PredictClientRiskInput - The input type for the predictClientRisk function.
 * - PredictClientRiskOutput - The return type for the predictClientRisk function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const PredictClientRiskInputSchema = z.object({
  workoutsCompleted: z.number().describe('Number of workouts completed by the client.'),
  exerciseCompliance: z
    .number()
    .describe('Exercise compliance percentage of the client.'),
  nutritionCompliance: z
    .number()
    .describe('Nutrition compliance percentage of the client.'),
  clientId: z.string().describe('The ID of the client.'),
});
export type PredictClientRiskInput = z.infer<typeof PredictClientRiskInputSchema>;

const PredictClientRiskOutputSchema = z.object({
  clientId: z.string().describe('The ID of the client.'),
  riskStatus: z
    .enum(['dropout', 'committed'])
    .describe('The predicted risk status of the client (dropout or committed).'),
});
export type PredictClientRiskOutput = z.infer<typeof PredictClientRiskOutputSchema>;

export async function predictClientRisk(input: PredictClientRiskInput): Promise<PredictClientRiskOutput> {
  return predictClientRiskFlow(input);
}

const prompt = ai.definePrompt({
  name: 'predictClientRiskPrompt',
  input: {schema: PredictClientRiskInputSchema},
  output: {schema: PredictClientRiskOutputSchema},
  prompt: `Based on the client's activity and compliance data, predict their risk status (dropout or committed).

Client ID: {{{clientId}}}
Workouts Completed: {{{workoutsCompleted}}}
Exercise Compliance: {{{exerciseCompliance}}}%
Nutrition Compliance: {{{nutritionCompliance}}}%

Predict the risk status as either 'dropout' or 'committed'.`,
});

const predictClientRiskFlow = ai.defineFlow(
  {
    name: 'predictClientRiskFlow',
    inputSchema: PredictClientRiskInputSchema,
    outputSchema: PredictClientRiskOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
